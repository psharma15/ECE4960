function [ ] = catcherror_all( )
%This is Utility Program for MATLAB Exception Handling
%   This code checks how exception handling is taken care of in MATLAB by
%   generating error test cases
% Pragya Sharma, ps847
% 11-02-2017

% Open text files
fileID1 = fopen('Compliance_Report.txt','w');
fprintf(fileID1,'\t \t \t \t \t \t Compliance Report \n ');
fileID2 = fopen('Log.txt','w');
fprintf(fileID2,'\t \t \t \t \t \t \t Log \n ');

% Call functions
int_overflow(fileID1,fileID2);
div_by_0(fileID1,fileID2);
float_pt_overflow(fileID1,fileID2);
inf_ninf(fileID1,fileID2);
nan_det(fileID1,fileID2);
sign_0(fileID1,fileID2);
soft_land(fileID1,fileID2);
end

function [] = int_overflow(f1,f2)
%This function checks integer overflow
%   This creates overflow by factorial calculation
try      
    n = 13;
    intFactorial = int32(zeros(1,n+1));
    intFactorial(1) = int32(1);
    dobFactorial = zeros(1,n+1);
    dobFactorial(1) = 1;
    x = (1:n+1);
    for i=2:1:14
        intFactorial(i) = int32(intFactorial(i-1) * i);
        dobFactorial(i) = dobFactorial(i-1) * i;
    end
    A = [x; double(intFactorial); dobFactorial];
    msg = '########### Integer overflow occured ###########';
    fprintf(f1,'\t \t \t %s \n',msg);
    fprintf(f2,'\n \t \t \t %s \n',msg);
    fprintf(f2,'32 bit signed integer overflow generated by calculating factorial. \n');
    fprintf(f2,'%6s % 12s %12s\r\n','Iteration','32-bit Int Factorial','64-bit Double Factorial');
    fprintf(f2,'%6d %12d %12.0f\n',A);
    msg1 = 'Matlab didn''t detect interger overflow at iteration = ';
catch ME
    msg1 = ['Matlab detected error: ',ME.message];
    fprintf(f1,'%s %d \n',msg1, n);
end
fprintf(f2,'%s % d \n',msg1, n);
end

function [] = div_by_0(f1,f2)
%This function checks integer division by zero error
a = uint8(5);
b = uint8(5);
try
    i = 1/(a-b);
    fprintf(f1,'\t \t \t ########### 8 bit Int Division by 0 occured ###########\n');
    fprintf(f2,'\n \t \t \t ########### 8 bit Int Division by 0 occured ###########\n');
    fprintf(f2,'1/(%d - %d) = %d \n',a,b,i);
    msg1 = 'Matlab didn''t detect any warning for integer division by 0.';
catch ME
    msg1 = ['Matlab detected error: ',ME.message];
    fprintf(f1,'%s \n',msg1);
end
fprintf(f2,'%s \n',msg1);
end

function [] = float_pt_overflow(f1,f2)
%This function generates floating point overflow by using exponential
%series
try    
    N = 6;
    pow_exp = zeros(1,N);
    exp_series = logspace(-2,3,N);
    for i = 1:N
        pow_exp(i) = exp(exp_series(i));
    end
    msg = ('Double precision floating point overflow occured');
    fprintf(f1,'\t \t \t ########### %s ###########\n',msg);
    fprintf(f2,'\n \t \t \t ########### %s ###########\n',msg);
    fprintf(f2,'Double precision floating point overflow generated by an exponential series at iteration %d\n',N);
    fprintf(f2,'%12s %20s %20s\n','Iteration','pwr','exp(pwr)');
    fprintf(f2,'%12d %20.6e % 20.12e\n',[(1:N); exp_series; pow_exp]);
    msg1 = 'Matlab didn''t detect double precision Floating Point overflow.';
catch ME
    msg1 = ['MATLAB detected error: ',ME.message];
    fprintf(f1,'%s \n',msg1);
end
fprintf(f2,'%s \n',msg1);
end

function [] = inf_ninf(f1,f2)
%This function checks generation, propagation of Infinity and Negative
%Infinity
x = inf;
op = zeros(6,1);
msga = ('########### Floating Point INF-NINF ###########');
fprintf(f1,'\t \t \t %s\n',msga);
fprintf(f2,'\n \t \t \t %s\n',msga);
try
    % Integer division by infinity and negative infinity
    op(1:2) = [1/x; 1/-x];
    fprintf(f2,'Div by inf/-inf occured. \n 1/inf = %f, \t 1/ninf = %f \n',op(1),op(2));
    msg1 = 'Matlab didn''t detect error for integer division by inf/ninf';
catch ME
    msg1 = ['MATLAB detected error: ',ME.message];
    fprintf(f1,'%s \n',msg1);
end
fprintf(f2,'%s \n',msg1);
try
    % Calculating sin(Inf) and sin(-Inf)
    op(3:4) = [sin(x); sin(-x)];
    fprintf(f2,'sin of inf/-inf occured. \n sin(inf) = %f, \t sin(ninf) = %f \n',op(3),op(4));
    msg2 = 'Matlab didn''t detect error for operation sin(inf or ninf)';
catch ME
    msg2 = ['MATLAB detected error: ',ME.message];
    fprintf(f1,'%s \n',msg2);
end
fprintf(f2,'%s \n',msg2);
try
    % Calculating exp(Inf) and exp(-Inf)
    op(5:6) = [exp(x); exp(-x)];
    fprintf(f2,'Exp of inf/-inf occured. \n exp(inf) = %f, \t exp(ninf) = %f \n',op(5),op(6));
    msg3 = 'Matlab didn''t detect error for exponential to the power of inf/ninf';
catch ME
    msg3 = ['MATLAB detected error: ',ME.message];
    fprintf(f1,'%s \n',msg3);
end
fprintf(f2,'%s \n\n',msg3);
% Propagation of Infinity and Negative Infinity
prop = [x+x; 0*x; x-x; 5+x; pi*(-x); 2/x];
fprintf(f2,'---------------Propagation of inf/ninf-----------------\n');
fprintf(f2,'1. \t Inf + Inf = %f\n',prop(1));
fprintf(f2,'2. \t 0*Inf = %f\n',prop(2));
fprintf(f2,'3. \t Inf+(-Inf) = %f\n',prop(3));
fprintf(f2,'4. \t 5 + Inf = %f\n', prop(4));
fprintf(f2,'5. \t %f *(-Inf) = %f\n',pi,prop(5));
fprintf(f2,'6. \t 2/Inf = %f\n',prop(6));
end

function [] = nan_det(f1,f2)
% This function generates NaN, detects using In-built function and checks
% propagation of NaN
x = inf;
try
    y = x/x;
    if(isnan(y))
        msga = 'NaN generated by Inf/Inf';
        fprintf(f1,'\t \t \t ########### %s ###########\n',msga);
        fprintf(f2,'\n \t \t \t ########### %s ###########\n',msga);
    end
    msg1 = 'Matlab didn''t detect error of NaN generation';
catch ME
    msg1 = ['MATLAB detected error: ',ME.message];    
    fprintf(f1,'%s\n',msg1);
end
fprintf(f2,'%s\n\n',msg1);
% Propagation and interaction
prop = [1/y; y+x; 0*y; 5+y];
fprintf(f2,'---------------Propagation of NaN-----------------\n');
fprintf(f2,'1. \t 1/NaN = %f\n',prop(1));
fprintf(f2,'2. \t NaN+Inf = %f\n',prop(2));
fprintf(f2,'3. \t 0*NaN = %f\n',prop(3));
fprintf(f2,'4. \t 5+NaN = %f\n',prop(4));
end

function [] = sign_0(f1,f2)
% This function checks function output difference based on positive and
% negative zero limit
pos0 = 0;
neg0 = -0;
% Checking difference between signed 0
if (1/pos0 == 1/neg0)
    warning('Signed 0 cannot be identified');
    return
end
op = zeros(6,1);
msg = ('########### Signed Zero ###########');
fprintf(f1,'\t \t \t %s\n',msg);
fprintf(f2,'\n \t \t \t %s\n',msg);
try
    % Observing and comparing log of positive and negative zero 
    op(1:2) = [log(pos0); log(neg0)];
    fprintf(f2,'lim x->0/-0 of logx occured. \n---------------------------\nlim x->0 log(x) = %f, \t lim x->-0 log(x) = %f \n---------------------------\n',op(1),op(2));
    msg1 = 'Matlab didn''t detect error for lim x->0/-0 of logx';
catch ME
    msg1 = ['MATLAB detected error: ',ME.message];
    fprintf(f1,'%s\n',msg1);
end
fprintf(f2,'%s\n',msg1);
pos0_sm = 1e-323;
neg0_sm = -1e-323;
try
    % Observing and comparing lim x->+-0 sinx/x
    op(3:4) = [sin(pos0_sm)/pos0_sm; sin(neg0_sm)/neg0_sm];
    fprintf(f2,'lim x->0/-0 of sinx/x occured. \n------------------------- \nlim x->0 sin(x)/x = %f, \t lim x->0 sin(x)/x = %f \n---------------------------\n',op(3),op(4));
    msg2 = 'Matlab didn''t detect error for lim x->0/-0 of sinx/x ';
catch ME
    msg2 = ['MATLAB detected error: ',ME.message];
    fprintf(f1,'%s\n',msg2);
end
fprintf(f2,'%s\n',msg2);
try
    % Observing and comparing lim x->0 of sinx/|x|
    op(5:6) = [sin(pos0_sm)/abs(pos0_sm); sin(neg0_sm)/abs(neg0_sm)];
    fprintf(f2,'lim x->0/-0 of sinx/|x| occured. \n---------------------------\nlim x->0 sin(x)/|x| = %f, \t lim x->0 sin(x)/|x| = %f \n---------------------------\n',op(5),op(6));
    msg3 = 'Matlab didn''t detect error for lim x->0/-0 of sinx/|x|';
catch ME
    msg3 = ['MATLAB detected error: ',ME.message];
    fprintf(f1,'%s\n',msg3);
end
fprintf(f2,'%s\n',msg3);
end

function [] = soft_land(f1,f2)
%This function generates and observes soft Landing or Underflow in
%different cases

% Soft Landing in subtraction of two very close numbers
x = 1.234567890e-315;
y1 = 1.234457890e-315;
y2 = 1.2345123432e-315;
y3 = 1.2345678909e-315;
op1 = [x-y1; x-y2; x-y3];
msg = ('########### Floating point soft landing ###########');
fprintf(f1,'\t \t \t %s\n',msg);
fprintf(f2,'\n \t \t \t %s\n',msg);
fprintf(f2,'Soft Landing observed in subtraction of %15.9e and %15.9e\n\n',x,y2);
fprintf(f2,'Normalized: %15.8e - %15.8e = %10.2e,\n',x,y1,op1(1));
fprintf(f2,'Denormalized: %15.8e - %15.10e = %12.6e \n',x,y2,op1(2));
fprintf(f2,'Exceeds denormalization limit: %15.8e - %15.10e = %10.2e \n\n',x,y3,op1(3));

% Soft Landing in division of two numbers
n = 7;
a = zeros(1,n);
a(1) = 1.234567890123456e-308;
y = zeros(1,n);
y(1) = 1;
for i = 2:n
    y(i) = y(i-1)*10;
    a(i) = a(i-1)/y(i);
end
fprintf(f2,'Soft landing generated in iterative division of x = %25.15e by y\n\n',a(1));
fprintf(f2,'% 12s %12s %25s \n','Iteration','y', 'x');
fprintf(f2,'% 12d %12.0e %25.15e \n',[(1:n); y; a]);

% Soft Landing in taking limit of x->+-0 sin(a*x)/x
m = 18;
b = zeros(1,m);
x = zeros(1,m+1);
x(1) = 1e-307;
for i = 1:m
    b(i) = sin(1.23456789012345*x(i))/x(i);
    x(i+1) = x(i)/10;
end
fprintf(f2,'\nSoft landing generated in limx->0 of sin(1.23456789012345.x)/x\n\n');
fprintf(f2,'% 12s %12s %25s \n','Iteration','x', 'Limit');
fprintf(f2,'% 12d %12.0e %25.16e \n',[(1:m);x(1:m); b]);
end







